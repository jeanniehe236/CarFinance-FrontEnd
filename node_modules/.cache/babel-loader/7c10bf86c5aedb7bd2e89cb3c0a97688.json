{"ast":null,"code":"var _jsxFileName = \"/Users/jeanniehe/Documents/GitHub/CarFinance/car-finance/src/screens/HomeScreen.js\";\nimport React from 'react';\nimport { getAnswers, getUserFriendlyHeaders, num2currency } from '../utils';\nimport '../App.css';\nimport NumberFormat from 'react-number-format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HomeScreen extends React.Component {\n  constructor(props) {\n    super();\n\n    this.prefillAnswers = (prefilled, li) => {\n      return prefilled == undefined ? li[0] : prefilled;\n    };\n\n    this.handleSubmit = () => {\n      const answersParsed = this.checkEmptyAnswers();\n\n      if (answersParsed.length > 0) {\n        this.props.history.push('/products/' + answersParsed.join('/'));\n      }\n    };\n\n    this.checkEmptyAnswers = () => {\n      var emptyAnswers = [];\n      var headers = getUserFriendlyHeaders();\n      var answersParsed = [];\n      getAnswers(this.state).map((item, i) => {\n        if (item == undefined || String(item) == \"NaN\") {\n          console.log(item, isNaN(item));\n          emptyAnswers.push(headers[i]);\n        } else answersParsed.push(item);\n      });\n\n      if (emptyAnswers.length > 0) {\n        this.setState({\n          warning: \"Please provide the \" + emptyAnswers.join(\", \") + \". \"\n        });\n        return [];\n      } else return answersParsed;\n    };\n\n    this.getRadioEntry = (key, li, placeholder, setter) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", key, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 22\n        }, this), \" \", li.map((item, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: key,\n            value: item,\n            checked: placeholder == item,\n            onChange: setter\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), \" \", item.replaceAll('_', ''), \" \"]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.getTextInput = (header, placeholder, setter, unit) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"header\",\n          children: [\" \", header, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(NumberFormat, {\n          format: \"### ### ###\",\n          type: \"text\",\n          name: header,\n          value: parseInt(placeholder, 10),\n          onChange: event => {\n            var value = parseInt(event.target.value.replaceAll(/[^0-9]/g, \"\"), 0);\n            setter(isNaN(value) ? \"0\" : value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n          children: unit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 16\n      }, this);\n    };\n\n    const predefinedAnswers = getAnswers(props.match.params);\n    this.state = {\n      channels: [],\n      carTypes: [],\n      fuelTypes: [],\n      channel: predefinedAnswers[0],\n      carType: predefinedAnswers[1],\n      fuelType: predefinedAnswers[2],\n      totCost: predefinedAnswers[3],\n      downPayment: predefinedAnswers[4],\n      term: predefinedAnswers[5],\n      warning: \"Please provide your answers below. Please note that only integer inputs are allowed. For any special case, please contact the bank.\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8080/car-finance\").then(response => response.json()).then(data => {\n      this.setState({\n        channels: data.channels,\n        carTypes: data.carTypes,\n        fuelTypes: data.fuelTypes,\n        channel: this.prefillAnswers(this.state.channel, data.channels),\n        carType: this.prefillAnswers(this.state.carType, data.carTypes),\n        fuelType: this.prefillAnswers(this.state.fuelType, data.fuelTypes),\n        totCost: this.prefillAnswers(Number.parseInt(this.state.totCost), [100]),\n        downPayment: this.prefillAnswers = (parseInt(this.state.totCost), [10]),\n        term: this.prefillAnswers = (parseInt(this.state.totCost), [10])\n      });\n      console.log(this.state);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"banner\",\n        children: \"Welcome To Car Finance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"card\",\n        children: this.state.warning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        children: [this.getRadioEntry(\"Channel\", this.state.channels, this.state.channel, event => {\n          this.setState({\n            channel: event.target.value\n          });\n        }), this.getRadioEntry(\"Car Type\", this.state.carTypes, this.state.carType, event => {\n          this.setState({\n            carType: event.target.value\n          });\n        }), this.getRadioEntry(\"Fuel Type\", this.state.fuelTypes, this.state.fuelType, event => {\n          this.setState({\n            fuelType: event.target.value\n          });\n        }), this.getTextInput(\"Car Price\", this.state.totCost, value => {\n          this.setState({\n            totCost: value\n          });\n        }, \"kr\"), this.getTextInput(\"Down Payment\", this.state.downPayment, value => this.setState({\n          downPayment: value\n        }), \"kr\"), this.getTextInput(\"Loan Term\", this.state.term, value => this.setState({\n          term: value\n        }), \"years\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"card\",\n        onClick: this.handleSubmit.bind(this),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/jeanniehe/Documents/GitHub/CarFinance/car-finance/src/screens/HomeScreen.js"],"names":["React","getAnswers","getUserFriendlyHeaders","num2currency","NumberFormat","HomeScreen","Component","constructor","props","prefillAnswers","prefilled","li","undefined","handleSubmit","answersParsed","checkEmptyAnswers","length","history","push","join","emptyAnswers","headers","state","map","item","i","String","console","log","isNaN","setState","warning","getRadioEntry","key","placeholder","setter","replaceAll","getTextInput","header","unit","parseInt","event","value","target","predefinedAnswers","match","params","channels","carTypes","fuelTypes","channel","carType","fuelType","totCost","downPayment","term","componentDidMount","fetch","then","response","json","data","Number","render","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getAnswers, getUserFriendlyHeaders, num2currency} from '../utils';\nimport '../App.css';\nimport NumberFormat from 'react-number-format';\nclass HomeScreen extends React.Component{\n\n    constructor(props){\n        super();\n        const predefinedAnswers = getAnswers(props.match.params);\n        this.state = {\n            channels: [],\n            carTypes: [],\n            fuelTypes: [],\n            channel: predefinedAnswers[0],\n            carType: predefinedAnswers[1],\n            fuelType: predefinedAnswers[2],\n            totCost:predefinedAnswers[3],\n            downPayment:predefinedAnswers[4],\n            term:predefinedAnswers[5],\n            warning: \"Please provide your answers below. Please note that only integer inputs are allowed. For any special case, please contact the bank.\"\n        }\n    }\n    componentDidMount(){\n        fetch(\"http://localhost:8080/car-finance\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                channels: data.channels,\n                carTypes: data.carTypes,\n                fuelTypes: data.fuelTypes,\n                channel: this.prefillAnswers(this.state.channel, data.channels),\n                carType: this.prefillAnswers(this.state.carType, data.carTypes),\n                fuelType: this.prefillAnswers(this.state.fuelType, data.fuelTypes),\n                totCost: this.prefillAnswers(Number.parseInt(this.state.totCost), [100]),\n                downPayment: this.prefillAnswers =(parseInt(this.state.totCost), [10]),\n                term:this.prefillAnswers =(parseInt(this.state.totCost), [10]),\n            })\n            console.log(this.state);\n        });\n\n        \n    }\n    prefillAnswers =(prefilled, li)=>{\n        return prefilled == undefined ? li[0] : prefilled;\n    }\n    handleSubmit = () => {\n        const answersParsed = this.checkEmptyAnswers()\n        if (answersParsed.length > 0){\n            this.props.history.push('/products/'+answersParsed.join('/'));\n        }\n    }\n    \n    checkEmptyAnswers =()=>{\n        var emptyAnswers = [];\n        var headers  = getUserFriendlyHeaders();\n        var answersParsed = []\n        getAnswers(this.state).map((item, i)=>{\n            if (item == undefined || String(item) == \"NaN\") {\n                console.log(item,isNaN(item));\n                emptyAnswers.push(headers[i]);\n            }\n            else answersParsed.push(item);\n        });\n        if (emptyAnswers.length > 0){\n            this.setState({\n                warning: \"Please provide the \" + emptyAnswers.join(\", \") + \". \"\n            });\n            return [];\n        } else return answersParsed;\n    }\n\n    \n    getRadioEntry = (key, li, placeholder, setter) => {\n        return <div> <span> {key}: </span> {li.map((item, i) =>\n                <label key = {item}>\n            <input type=\"radio\"\n                key = {item}\n                name={key}\n                value={item}\n                checked = {placeholder == item}\n                onChange={setter}\n\n            /> {item.replaceAll('_','')} </label>)}\n            </div>\n    }\n\n    getTextInput = (header, placeholder, setter, unit) => {\n        return <div><span className = \"header\"> {header}: </span>\n        <NumberFormat format=\"### ### ###\"\n        type =\"text\" name = {header}\n        value={parseInt(placeholder, 10)}\n        onChange={\n            (event) =>{\n            var value = parseInt(event.target.value.replaceAll(/[^0-9]/g, \"\"),0);\n            setter(isNaN(value)? \"0\":value)}}\n        /> <label>{unit}</label>\n        </div>\n    \n    }\n    \n    render(){\n        return <div>\n            <h2 className = \"banner\">Welcome To Car Finance</h2>\n            <button className = \"card\">{this.state.warning}</button>\n         \n            <form className = \"form\">\n            \n                {this.getRadioEntry(\"Channel\", this.state.channels, this.state.channel, \n                (event)=> { this.setState({channel:event.target.value});})}\n                {this.getRadioEntry(\"Car Type\", this.state.carTypes, this.state.carType,\n                (event)=> { this.setState({carType:event.target.value});})}\n                {this.getRadioEntry(\"Fuel Type\", this.state.fuelTypes, this.state.fuelType,\n                (event)=> { this.setState({fuelType:event.target.value});})}\n                {this.getTextInput(\"Car Price\", this.state.totCost, (value) => {this.setState({totCost: value});}, \"kr\")}\n                {this.getTextInput(\"Down Payment\", this.state.downPayment, (value) => this.setState({downPayment: value}), \"kr\")}\n                {this.getTextInput(\"Loan Term\", this.state.term, (value) => this.setState({term: value}), \"years\")}\n            </form>\n            <button className = \"card\" onClick={this.handleSubmit.bind(this)}>Submit</button>\n           \n        </div>\n    }\n}\n\nexport default HomeScreen;"]},"metadata":{},"sourceType":"module"}