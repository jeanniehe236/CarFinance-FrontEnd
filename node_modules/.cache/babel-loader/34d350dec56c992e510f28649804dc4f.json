{"ast":null,"code":"var _jsxFileName = \"/Users/jeanniehe/Documents/car-finance/src/screens/HomeScreen.js\";\nimport React from 'react';\nimport { getAnswers, getUserFriendlyHeaders } from '../utils';\nimport '../App.css';\nimport CurrencyFormat from 'react-currency-format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HomeScreen extends React.Component {\n  constructor(props) {\n    super();\n\n    this.handleSubmit = () => {\n      if (this.checkEmptyAnswers()) {\n        var answers = getAnswers(this.state);\n        var answersParsed = [];\n        answers.map(item => item = item.replaceAll(\"/ /g\", \"\"));\n        console.log(answers);\n      } //this.props.history.push('/products/'+this.getAnswers(this.state).join('/'));\n\n    };\n\n    this.checkValidAnswers = () => {\n      console.log(\"checking\");\n      var emptyAnswers = this.checkEmptyAnswers();\n    };\n\n    this.checkEmptyAnswers = () => {\n      var emptyAnswers = [];\n      var headers = getUserFriendlyHeaders();\n      getAnswers(this.state).map((item, i) => {\n        console.log(headers[i], item);\n        if (item == undefined) emptyAnswers.push(headers[i]);\n      });\n      console.log(\"empty\", emptyAnswers);\n\n      if (emptyAnswers.length > 0) {\n        console.log(\"found empty answers\");\n        this.setState({\n          warning: \"Please provide the \" + emptyAnswers.join(\", \") + \". \"\n        });\n        return false;\n      } else {\n        console.log(\"not empty\", emptyAnswers);\n        return true;\n      }\n    };\n\n    this.getRadioEntry = (key, li, placeholder, setter) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\" \", key, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 22\n        }, this), \" \", li.map((item, i) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"radio\",\n            name: key,\n            value: item,\n            onChange: setter\n          }, item, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), \" \", item.replaceAll('_', ''), \" \"]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 16\n      }, this);\n    };\n\n    this.getTextInput = (header, placeholder, setter, unit) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"header\",\n          children: [\" \", header, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(CurrencyFormat, {\n          format: \"### ### ###\",\n          type: \"text\",\n          name: header,\n          value: placeholder,\n          onChange: event => {\n            var value = event.target.value.replaceAll(\"/[^0-9]/g\", '');\n            setter(isNaN(parseInt(value)) ? \"0\" : value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"label\", {\n          children: unit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }, this);\n    };\n\n    const predefinedAnswers = getAnswers(props.match.params);\n    this.state = {\n      channels: [],\n      carTypes: [],\n      fuelTypes: [],\n      channel: predefinedAnswers[0],\n      carType: predefinedAnswers[1],\n      fuelType: predefinedAnswers[2],\n      totCost: predefinedAnswers[3],\n      downPayment: predefinedAnswers[4],\n      term: predefinedAnswers[5],\n      warning: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8080/car-finance\").then(response => response.json()).then(data => {\n      this.setState({\n        channels: data.channels,\n        carTypes: data.carTypes,\n        fuelTypes: data.fuelTypes,\n        channel: data.channels[0],\n        carType: data.carTypes[0],\n        fuelType: data.fuelTypes[0]\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"banner\",\n        children: \"Welcome To Car Finance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"card warning\",\n        children: this.state.warning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), this.getRadioEntry(\"Channel\", this.state.channels, this.state.channel, event => {\n        this.setState({\n          channel: event.target.value\n        });\n      }), this.getRadioEntry(\"Car Type\", this.state.carTypes, this.state.fuelTypes, event => {\n        this.setState({\n          carType: event.target.value\n        });\n      }), this.getRadioEntry(\"Fuel Type\", this.state.fuelTypes, this.state.fuelTypes, event => {\n        this.setState({\n          fuelType: event.target.value\n        });\n      }), this.getTextInput(\"Car Price\", this.state.totCost, value => {\n        this.setState({\n          totCost: value\n        });\n      }, \"kr\"), this.getTextInput(\"Down Payment\", this.state.downPayment, value => this.setState({\n        downPayment: value\n      }), \"kr\"), this.getTextInput(\"Loan Term\", this.state.term, value => this.setState({\n        term: value\n      }), \"years\"), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"card\",\n        onClick: this.handleSubmit.bind(this),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/jeanniehe/Documents/car-finance/src/screens/HomeScreen.js"],"names":["React","getAnswers","getUserFriendlyHeaders","CurrencyFormat","HomeScreen","Component","constructor","props","handleSubmit","checkEmptyAnswers","answers","state","answersParsed","map","item","replaceAll","console","log","checkValidAnswers","emptyAnswers","headers","i","undefined","push","length","setState","warning","join","getRadioEntry","key","li","placeholder","setter","getTextInput","header","unit","event","value","target","isNaN","parseInt","predefinedAnswers","match","params","channels","carTypes","fuelTypes","channel","carType","fuelType","totCost","downPayment","term","componentDidMount","fetch","then","response","json","data","render","bind"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,sBAArB,QAAkD,UAAlD;AACA,OAAO,YAAP;AACA,OAAOC,cAAP,MAA2B,uBAA3B;;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd;;AADc,SA+BlBC,YA/BkB,GA+BH,MAAM;AACjB,UAAI,KAAKC,iBAAL,EAAJ,EAA6B;AACzB,YAAIC,OAAO,GAAGT,UAAU,CAAC,KAAKU,KAAN,CAAxB;AACA,YAAIC,aAAa,GAAG,EAApB;AACAF,QAAAA,OAAO,CAACG,GAAR,CAAYC,IAAI,IAAIA,IAAI,GAAGA,IAAI,CAACC,UAAL,CAAgB,MAAhB,EAAuB,EAAvB,CAA3B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACH,OANgB,CAQjB;;AACH,KAxCiB;;AAAA,SA0ClBQ,iBA1CkB,GA0CC,MAAI;AACnBF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,UAAIE,YAAY,GAAG,KAAKV,iBAAL,EAAnB;AACH,KA7CiB;;AAAA,SA+ClBA,iBA/CkB,GA+CC,MAAI;AACnB,UAAIU,YAAY,GAAG,EAAnB;AACA,UAAIC,OAAO,GAAIlB,sBAAsB,EAArC;AACAD,MAAAA,UAAU,CAAC,KAAKU,KAAN,CAAV,CAAuBE,GAAvB,CAA2B,CAACC,IAAD,EAAOO,CAAP,KAAW;AAClCL,QAAAA,OAAO,CAACC,GAAR,CAAYG,OAAO,CAACC,CAAD,CAAnB,EAAwBP,IAAxB;AACA,YAAIA,IAAI,IAAIQ,SAAZ,EAAuBH,YAAY,CAACI,IAAb,CAAkBH,OAAO,CAACC,CAAD,CAAzB;AAE1B,OAJD;AAKAL,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBE,YAArB;;AACA,UAAIA,YAAY,CAACK,MAAb,GAAsB,CAA1B,EAA4B;AACxBR,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,aAAKQ,QAAL,CAAc;AACNC,UAAAA,OAAO,EAAE,wBAAwBP,YAAY,CAACQ,IAAb,CAAkB,IAAlB,CAAxB,GAAkD;AADrD,SAAd;AAGA,eAAO,KAAP;AACH,OAND,MAMM;AACFX,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBE,YAAzB;AACA,eAAO,IAAP;AACH;AACJ,KAlEiB;;AAAA,SAqElBS,aArEkB,GAqEF,CAACC,GAAD,EAAMC,EAAN,EAAUC,WAAV,EAAuBC,MAAvB,KAAkC;AAC9C,0BAAO;AAAA,qCAAM;AAAA,0BAAQH,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAN,OAA6BC,EAAE,CAACjB,GAAH,CAAO,CAACC,IAAD,EAAOO,CAAP,kBACnC;AAAA,kCACJ;AAAO,YAAA,IAAI,EAAC,OAAZ;AAEI,YAAA,IAAI,EAAEQ,GAFV;AAGI,YAAA,KAAK,EAAEf,IAHX;AAII,YAAA,QAAQ,EAAEkB;AAJd,aACWlB,IADX;AAAA;AAAA;AAAA;AAAA,kBADI,OAMAA,IAAI,CAACC,UAAL,CAAgB,GAAhB,EAAoB,EAApB,CANA;AAAA,WAAcD,IAAd;AAAA;AAAA;AAAA;AAAA,gBAD4B,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AASH,KA/EiB;;AAAA,SAiFlBmB,YAjFkB,GAiFH,CAACC,MAAD,EAASH,WAAT,EAAsBC,MAAtB,EAA8BG,IAA9B,KAAuC;AAClD,0BAAO;AAAA,gCAAK;AAAM,UAAA,SAAS,EAAG,QAAlB;AAAA,0BAA6BD,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAL,eACP,QAAC,cAAD;AAAgB,UAAA,MAAM,EAAC,aAAvB;AACA,UAAA,IAAI,EAAE,MADN;AACa,UAAA,IAAI,EAAIA,MADrB;AAEA,UAAA,KAAK,EAAEH,WAFP;AAGA,UAAA,QAAQ,EAAGK,KAAD,IAAU;AAChB,gBAAIC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAAb,CAAmBtB,UAAnB,CAA8B,WAA9B,EAA2C,EAA3C,CAAZ;AACAiB,YAAAA,MAAM,CAACO,KAAK,CAACC,QAAQ,CAACH,KAAD,CAAT,CAAL,GAAuB,GAAvB,GAA2BA,KAA5B,CAAN;AAAyC;AAL7C;AAAA;AAAA;AAAA;AAAA,gBADO,oBAOJ;AAAA,oBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA,gBAPI;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AASH,KA3FiB;;AAEd,UAAMM,iBAAiB,GAAGxC,UAAU,CAACM,KAAK,CAACmC,KAAN,CAAYC,MAAb,CAApC;AACA,SAAKhC,KAAL,GAAa;AACTiC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,QAAQ,EAAE,EAFD;AAGTC,MAAAA,SAAS,EAAE,EAHF;AAITC,MAAAA,OAAO,EAAEN,iBAAiB,CAAC,CAAD,CAJjB;AAKTO,MAAAA,OAAO,EAAEP,iBAAiB,CAAC,CAAD,CALjB;AAMTQ,MAAAA,QAAQ,EAAER,iBAAiB,CAAC,CAAD,CANlB;AAOTS,MAAAA,OAAO,EAACT,iBAAiB,CAAC,CAAD,CAPhB;AAQTU,MAAAA,WAAW,EAACV,iBAAiB,CAAC,CAAD,CARpB;AASTW,MAAAA,IAAI,EAACX,iBAAiB,CAAC,CAAD,CATb;AAUTf,MAAAA,OAAO,EAAE;AAVA,KAAb;AAYH;;AACD2B,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,KAAK,CAAC,mCAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACV,WAAKjC,QAAL,CAAc;AACVmB,QAAAA,QAAQ,EAAEc,IAAI,CAACd,QADL;AAEVC,QAAAA,QAAQ,EAAEa,IAAI,CAACb,QAFL;AAGVC,QAAAA,SAAS,EAAEY,IAAI,CAACZ,SAHN;AAIVC,QAAAA,OAAO,EAAEW,IAAI,CAACd,QAAL,CAAc,CAAd,CAJC;AAKVI,QAAAA,OAAO,EAAEU,IAAI,CAACb,QAAL,CAAc,CAAd,CALC;AAMVI,QAAAA,QAAQ,EAAES,IAAI,CAACZ,SAAL,CAAe,CAAf;AANA,OAAd;AAQH,KAXD;AAYH;;AAgEDa,EAAAA,MAAM,GAAE;AACJ,wBAAO;AAAA,8BACH;AAAI,QAAA,SAAS,EAAG,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADG,eAEH;AAAQ,QAAA,SAAS,EAAG,cAApB;AAAA,kBAAoC,KAAKhD,KAAL,CAAWe;AAA/C;AAAA;AAAA;AAAA;AAAA,cAFG,EAIE,KAAKE,aAAL,CAAmB,SAAnB,EAA8B,KAAKjB,KAAL,CAAWiC,QAAzC,EAAmD,KAAKjC,KAAL,CAAWoC,OAA9D,EACAX,KAAD,IAAU;AAAE,aAAKX,QAAL,CAAc;AAACsB,UAAAA,OAAO,EAACX,KAAK,CAACE,MAAN,CAAaD;AAAtB,SAAd;AAA6C,OADxD,CAJF,EAME,KAAKT,aAAL,CAAmB,UAAnB,EAA+B,KAAKjB,KAAL,CAAWkC,QAA1C,EAAoD,KAAKlC,KAAL,CAAWmC,SAA/D,EACAV,KAAD,IAAU;AAAE,aAAKX,QAAL,CAAc;AAACuB,UAAAA,OAAO,EAACZ,KAAK,CAACE,MAAN,CAAaD;AAAtB,SAAd;AAA6C,OADxD,CANF,EAQE,KAAKT,aAAL,CAAmB,WAAnB,EAAgC,KAAKjB,KAAL,CAAWmC,SAA3C,EAAsD,KAAKnC,KAAL,CAAWmC,SAAjE,EACAV,KAAD,IAAU;AAAE,aAAKX,QAAL,CAAc;AAACwB,UAAAA,QAAQ,EAACb,KAAK,CAACE,MAAN,CAAaD;AAAvB,SAAd;AAA8C,OADzD,CARF,EAUE,KAAKJ,YAAL,CAAkB,WAAlB,EAA+B,KAAKtB,KAAL,CAAWuC,OAA1C,EAAoDb,KAAD,IAAW;AAAC,aAAKZ,QAAL,CAAc;AAACyB,UAAAA,OAAO,EAAEb;AAAV,SAAd;AAAiC,OAAhG,EAAkG,IAAlG,CAVF,EAWE,KAAKJ,YAAL,CAAkB,cAAlB,EAAkC,KAAKtB,KAAL,CAAWwC,WAA7C,EAA2Dd,KAAD,IAAW,KAAKZ,QAAL,CAAc;AAAC0B,QAAAA,WAAW,EAAEd;AAAd,OAAd,CAArE,EAA0G,IAA1G,CAXF,EAYE,KAAKJ,YAAL,CAAkB,WAAlB,EAA+B,KAAKtB,KAAL,CAAWyC,IAA1C,EAAiDf,KAAD,IAAW,KAAKZ,QAAL,CAAc;AAAC2B,QAAAA,IAAI,EAAEf;AAAP,OAAd,CAA3D,EAAyF,OAAzF,CAZF,eAaC;AAAQ,QAAA,SAAS,EAAG,MAApB;AAA2B,QAAA,OAAO,EAAE,KAAK7B,YAAL,CAAkBoD,IAAlB,CAAuB,IAAvB,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbD;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAgBH;;AAhHmC;;AAmHxC,eAAexD,UAAf","sourcesContent":["import React from 'react';\nimport { getAnswers, getUserFriendlyHeaders} from '../utils';\nimport '../App.css';\nimport CurrencyFormat from 'react-currency-format';\n\nclass HomeScreen extends React.Component{\n\n    constructor(props){\n        super();\n        const predefinedAnswers = getAnswers(props.match.params);\n        this.state = {\n            channels: [],\n            carTypes: [],\n            fuelTypes: [],\n            channel: predefinedAnswers[0],\n            carType: predefinedAnswers[1],\n            fuelType: predefinedAnswers[2],\n            totCost:predefinedAnswers[3],\n            downPayment:predefinedAnswers[4],\n            term:predefinedAnswers[5],\n            warning: \"\"\n        }\n    }\n    componentDidMount(){\n        fetch(\"http://localhost:8080/car-finance\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                channels: data.channels,\n                carTypes: data.carTypes,\n                fuelTypes: data.fuelTypes,\n                channel: data.channels[0],\n                carType: data.carTypes[0],\n                fuelType: data.fuelTypes[0],\n            })\n        });\n    }\n\n    handleSubmit = () => {\n        if (this.checkEmptyAnswers()){\n            var answers = getAnswers(this.state);\n            var answersParsed = []\n            answers.map(item => item = item.replaceAll(\"/ /g\",\"\"));\n            console.log(answers);\n        }\n\n        //this.props.history.push('/products/'+this.getAnswers(this.state).join('/'));\n    }\n\n    checkValidAnswers =()=>{\n        console.log(\"checking\")\n        var emptyAnswers = this.checkEmptyAnswers();\n    }\n    \n    checkEmptyAnswers =()=>{\n        var emptyAnswers = [];\n        var headers  = getUserFriendlyHeaders();\n        getAnswers(this.state).map((item, i)=>{\n            console.log(headers[i], item)\n            if (item == undefined) emptyAnswers.push(headers[i]);\n\n        });\n        console.log(\"empty\", emptyAnswers);\n        if (emptyAnswers.length > 0){\n            console.log(\"found empty answers\")\n            this.setState({\n                    warning: \"Please provide the \" + emptyAnswers.join(\", \") + \". \"\n            });\n            return false;\n        } else{\n            console.log(\"not empty\", emptyAnswers)\n            return true\n        }\n    }\n\n    \n    getRadioEntry = (key, li, placeholder, setter) => {\n        return <div> <span> {key}: </span> {li.map((item, i) =>\n                <label key = {item}>\n            <input type=\"radio\"\n                key = {item}\n                name={key}\n                value={item}\n                onChange={setter}\n            /> {item.replaceAll('_','')} </label>)}\n            </div>\n    }\n\n    getTextInput = (header, placeholder, setter, unit) => {\n        return <div><span className = \"header\"> {header}: </span>\n        <CurrencyFormat format=\"### ### ###\"\n        type =\"text\" name = {header}\n        value={placeholder}\n        onChange={(event) =>{\n            var value = event.target.value.replaceAll(\"/[^0-9]/g\", '');\n            setter(isNaN(parseInt(value))?\"0\":value)}}\n        /> <label>{unit}</label>\n        </div>\n    }\n    \n    render(){\n        return <div>\n            <h2 className = \"banner\">Welcome To Car Finance</h2>\n            <button className = \"card warning\">{this.state.warning}</button>\n            \n                {this.getRadioEntry(\"Channel\", this.state.channels, this.state.channel, \n                (event)=> { this.setState({channel:event.target.value});})}\n                {this.getRadioEntry(\"Car Type\", this.state.carTypes, this.state.fuelTypes,\n                (event)=> { this.setState({carType:event.target.value});})}\n                {this.getRadioEntry(\"Fuel Type\", this.state.fuelTypes, this.state.fuelTypes,\n                (event)=> { this.setState({fuelType:event.target.value});})}\n                {this.getTextInput(\"Car Price\", this.state.totCost, (value) => {this.setState({totCost: value});}, \"kr\")}\n                {this.getTextInput(\"Down Payment\", this.state.downPayment, (value) => this.setState({downPayment: value}), \"kr\")}\n                {this.getTextInput(\"Loan Term\", this.state.term, (value) => this.setState({term: value}), \"years\")}\n                <button className = \"card\" onClick={this.handleSubmit.bind(this)}>Submit</button>\n           \n        </div>\n    }\n}\n\nexport default HomeScreen;"]},"metadata":{},"sourceType":"module"}