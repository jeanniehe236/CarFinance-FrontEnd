{"ast":null,"code":"var _jsxFileName = \"/Users/jeanniehe/Documents/GitHub/CarFinance/car-finance/src/screens/HomeScreen.js\";\nimport React from 'react';\nimport { getAnswers, getUserFriendlyHeaders } from '../utils';\nimport '../App.css';\nimport NumberFormat from 'react-number-format';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass HomeScreen extends React.Component {\n  constructor(props) {\n    const predefinedAnswers = getAnswers(props.match.params);\n    this.state = {\n      channels: [],\n      carTypes: [],\n      fuelTypes: [],\n      channel: predefinedAnswers[0],\n      carType: predefinedAnswers[1],\n      fuelType: predefinedAnswers[2],\n      totCost: predefinedAnswers[3],\n      downPayment: predefinedAnswers[4],\n      term: predefinedAnswers[5],\n      warning: \"Please provide your answers below. Please note that only integer inputs are allowed. For any special case, please contact the bank.\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:8080/car-finance\").then(response => response.json()).then(data => {\n      this.setState({\n        channels: data.channels,\n        carTypes: data.carTypes,\n        fuelTypes: data.fuelTypes,\n        channel: this.prefillAnswers(this.state.channel, data.channels),\n        carType: this.prefillAnswers(this.state.carType, data.carTypes),\n        fuelType: this.prefillAnswers(this.state.fuelType, data.fuelTypes),\n        totCost: this.prefillAnswers(parseInt(this.state.totCost), [100]),\n        downPayment: this.prefillAnswers(parseInt(this.state.totCost), [10]),\n        term: this.prefillAnswers(parseInt(this.state.totCost), [10])\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"banner\",\n        children: \"Welcome To Car Finance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"card\",\n        children: this.state.warning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        children: [this.getRadioEntry(\"Channel\", this.state.channels, this.state.channel, event => {\n          this.setState({\n            channel: event.target.value\n          });\n        }), this.getRadioEntry(\"Car Type\", this.state.carTypes, this.state.carType, event => {\n          this.setState({\n            carType: event.target.value\n          });\n        }), this.getRadioEntry(\"Fuel Type\", this.state.fuelTypes, this.state.fuelType, event => {\n          this.setState({\n            fuelType: event.target.value\n          });\n        }), this.getTextInput(\"Car Price\", this.state.totCost, value => {\n          this.setState({\n            totCost: value\n          });\n        }, \"kr\"), this.getTextInput(\"Down Payment\", this.state.downPayment, value => this.setState({\n          downPayment: value\n        }), \"kr\"), this.getTextInput(\"Loan Term\", this.state.term, value => this.setState({\n          term: value\n        }), \"years\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"card\",\n        onClick: this.handleSubmit.bind(this),\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/jeanniehe/Documents/GitHub/CarFinance/car-finance/src/screens/HomeScreen.js"],"names":["React","getAnswers","getUserFriendlyHeaders","NumberFormat","HomeScreen","Component","constructor","props","predefinedAnswers","match","params","state","channels","carTypes","fuelTypes","channel","carType","fuelType","totCost","downPayment","term","warning","componentDidMount","fetch","then","response","json","data","setState","prefillAnswers","parseInt","render","getRadioEntry","event","target","value","getTextInput","handleSubmit","bind"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { getAnswers, getUserFriendlyHeaders} from '../utils';\nimport '../App.css';\nimport NumberFormat from 'react-number-format';\nclass HomeScreen extends React.Component{\n\n    constructor(props){\n        const predefinedAnswers = getAnswers(props.match.params);\n        this.state = {\n            channels: [],\n            carTypes: [],\n            fuelTypes: [],\n            channel: predefinedAnswers[0],\n            carType: predefinedAnswers[1],\n            fuelType: predefinedAnswers[2],\n            totCost:predefinedAnswers[3],\n            downPayment:predefinedAnswers[4],\n            term:predefinedAnswers[5],\n            warning: \"Please provide your answers below. Please note that only integer inputs are allowed. For any special case, please contact the bank.\"\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"http://localhost:8080/car-finance\")\n        .then(response => response.json())\n        .then(data => {\n            this.setState({\n                channels: data.channels,\n                carTypes: data.carTypes,\n                fuelTypes: data.fuelTypes,\n                channel: this.prefillAnswers(this.state.channel, data.channels),\n                carType: this.prefillAnswers(this.state.carType, data.carTypes),\n                fuelType: this.prefillAnswers(this.state.fuelType, data.fuelTypes),\n                totCost: this.prefillAnswers(parseInt(this.state.totCost), [100]),\n                downPayment: this.prefillAnswers(parseInt(this.state.totCost), [10]),\n                term:this.prefillAnswers(parseInt(this.state.totCost), [10]),\n            })\n        });\n\n        \n    }\n\n    prefillAnswers =(prefilled, li)=>{\n        return this.checkEmptyAnswer(prefilled) ? li[0] : prefilled;\n    }\n\n    handleSubmit = () => {\n        const answersParsed = this.checkEmptyAnswers()\n        if (answersParsed.length > 0){\n            this.props.history.push('/products/'+answersParsed.join('/'));\n        }\n    }\n    \n    checkEmptyAnswer = (item) => {\n        return item === undefined || String(item) === \"NaN\";\n    }\n\n    checkEmptyAnswers =()=>{\n        var emptyAnswers = [];\n        var headers  = getUserFriendlyHeaders();\n        var answersParsed = []\n        getAnswers(this.state).forEach((item, i)=>{\n            if (this.checkEmptyAnswer(item)) {\n                emptyAnswers.push(headers[i].toLowerCase());\n            }\n            else answersParsed.push(item);\n        });\n        if (emptyAnswers.length > 0){\n            this.setState({\n                warning: \"Please provide the \" + emptyAnswers.join(\", \") + \". \"\n            });\n            return [];\n        } else return answersParsed;\n    }\n\n    \n    getRadioEntry = (key, li, placeholder, setter) => {\n        return <div> <span> {key}: </span> {li.map((item, i) =>\n                <label key = {item}>\n            <input type=\"radio\"\n                key = {item}\n                name={key}\n                value={item}\n                checked = {placeholder === item}\n                onChange={setter}\n\n            /> {item.replaceAll('_','')} </label>)}\n            </div>\n    }\n\n    getTextInput = (header, placeholder, setter, unit) => {\n        return <div><span className = \"header\"> {header}: </span>\n        <NumberFormat format=\"### ### ###\"\n        type =\"text\" name = {header}\n        value={parseInt(placeholder, 10)}\n        onChange={\n            (event) =>{\n            var value = parseInt(event.target.value.replaceAll(/[^0-9]/g, \"\"),0);\n            setter(isNaN(value)? \"0\":value)}}\n        /> <label>{unit}</label>\n        </div>\n    }\n    \n    render(){\n        return <div>\n            <h2 className = \"banner\">Welcome To Car Finance</h2>\n            <button className = \"card\">{this.state.warning}</button>\n         \n            <form className = \"form\">\n            \n                {this.getRadioEntry(\"Channel\", this.state.channels, this.state.channel, \n                (event)=> { this.setState({channel:event.target.value});})}\n                {this.getRadioEntry(\"Car Type\", this.state.carTypes, this.state.carType,\n                (event)=> { this.setState({carType:event.target.value});})}\n                {this.getRadioEntry(\"Fuel Type\", this.state.fuelTypes, this.state.fuelType,\n                (event)=> { this.setState({fuelType:event.target.value});})}\n                {this.getTextInput(\"Car Price\", this.state.totCost, (value) => {this.setState({totCost: value});}, \"kr\")}\n                {this.getTextInput(\"Down Payment\", this.state.downPayment, (value) => this.setState({downPayment: value}), \"kr\")}\n                {this.getTextInput(\"Loan Term\", this.state.term, (value) => this.setState({term: value}), \"years\")}\n            </form>\n            <button className = \"card\" onClick={this.handleSubmit.bind(this)}>Submit</button>\n           \n        </div>\n    }\n}\n\nexport default HomeScreen;"]},"metadata":{},"sourceType":"module"}